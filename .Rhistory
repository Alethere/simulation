simulation <- readData(path = "simulation/",format="Fasta",SNP.DATA = T)
library(PopGenome)
simulation <- readData(path = "simulation/",format="Fasta",SNP.DATA = T)
position1 <- unlist(read.table("sweep_posID11.txt")) #associate data with positions
simulation <- set.ref.positions(simulation,list(position1))
#get the range of our data to define sliding windows for the analysis
get.sum.data(simulation)
range<-range(simulation@region.data@biallelic.sites)
#definition of sliding windows
sim_sw<- sliding.window.transform(simulation,width=5000,
jump=5000,start.pos = range[1],
end.pos =range[2], type=2,whole.data=TRUE)
sim_sw <- neutrality.stats(sim_sw) #this adds into the sim_sw GENOME file a series of diversity statistics, including
lapply(get.neutrality(sim_sw, theta=T),summary) #if we apply the summary function to the list of results we have observed with the lapply function, we can see a set of summaries of all the indexes calculated.
xaxis2 <- strsplit(sim_sw@region.names,split=" : ")
xaxis2 <- sapply(xaxis2,function(x){as.numeric(strsplit(x,split=" ")[[c(1,1)]])})
plot(xaxis2,sim_sw@theta_Tajima[,1],col=c("blue"),type="l",xlab="Simulated data",ylab="nucleotide diversity (in 1kb window)",ylim=data_range)
plot(xaxis2,sim_sw@theta_Tajima[,1],col=c("blue"),type="l",xlab="Simulated data",ylab="nucleotide diversity (in 1kb window)",ylim=data_range)
plot(xaxis2,sim_sw@theta_Tajima[,1],col=c("blue"),type="l",xlab="Simulated data",ylab="nucleotide diversity (in 1kb window)",ylim=data_range)
data_range <- range(sim_sw@theta_Tajima,na.rm = TRUE)
plot(xaxis2,sim_sw@theta_Tajima[,1],col=c("blue"),type="l",xlab="Simulated data",
ylab="nucleotide diversity (in 1kb window)",ylim=data_range)
range(simulation@region.data@biallelic.sites)
library(tidyverse)
install.packages(tidyverse)
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages(tidyverse)
install.packages("tidyverse")
R.version
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("PopGenome")
sim_sw <- neutrality.stats(sim_sw)
